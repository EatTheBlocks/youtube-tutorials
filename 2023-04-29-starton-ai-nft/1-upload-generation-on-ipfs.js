import axios from "axios";
import {OPEN_AI_API_KEY, PROMPT, SIZE, STARTON_API_KEY, STARTON_API_URL} from "./0-configuration.js";
import FormData from "form-data"

export const openAI = axios.create({
	baseURL: "https://api.openai.com/v1",
	headers: {
		'Content-Type': 'application/json',
		'Authorization': `Bearer ${OPEN_AI_API_KEY}`
	}
})

export const generateImages = async () => {
	console.log('[OPEN AI]\timage generation')
	try {
		const res = await openAI.post('/images/generations', {
			prompt: PROMPT,
			n: 1,
			size: SIZE,
		})
		return res.data.data[0].url
	} catch (e) {
		console.log(`[ERROR] - Could not generate all assets`)
	}
}

export const generateImageBuffers = async (pictureUrl) => {
	console.log('[OPEN AI]\textractPictureBuffers')
	try {
		const res = await axios.get(pictureUrl, {
			responseType: 'arraybuffer',
		})
		const buffer = Buffer.from(res.data, "utf-8")
		return buffer
	} catch (e) {
		console.error(e)
		throw e;
	}
}

export const uploadImageToIpfs = async (imgBuffer) => {
	console.log("[STARTON]\tuploading image on ipfs")
	try {
		const data = new FormData()
		data.append("file", imgBuffer, PROMPT + ".png")
		data.append("isSync", "true")
		const ipfsFile = await axios.post(STARTON_API_URL + "/ipfs/file", data, {
			headers: {
				"Content-type": `multipart/form-data; boundary=${data.getBoundary()}`,
				"x-api-key": STARTON_API_KEY,
			}
		})
		return ipfsFile.data.cid
	} catch (e) {
		console.log("[ERROR] - upload on ipfs error", e)
	}
}

export const createNFTMetadataOnStarton = async (ipfsCids) => {
	console.log("[STARTON]\tcreate and upload nft metadata on ipfs")
	try {
		const metadataNFT = {
			name: PROMPT,
			image: "ipfs://ipfs/" + ipfsCids,
			description: "Starton autogenerated collection with artificial intelligence",
		}

		// STARTON CALL
		const jsonUpload = await axios.post(STARTON_API_URL + "/ipfs/json", {
			name: PROMPT + ".json",
			content: metadataNFT,
		}, {
			headers: {
				"x-api-key": STARTON_API_KEY
			}
		})
		return jsonUpload.data.cid
	} catch (e) {
		console.log(e)
	}
}

export const generateAndUploadWorkflow = async () => {
	const picturesUrl = await generateImages()
	const buffer = await generateImageBuffers(picturesUrl)
	const imageCid = await uploadImageToIpfs(buffer)
	console.log("IMAGE CID:", imageCid)
	const nftMetadata = await createNFTMetadataOnStarton(imageCid)
	console.log("METADATA CID", nftMetadata)
	return nftMetadata
}

generateAndUploadWorkflow().then().catch(e=>console.log(e))
