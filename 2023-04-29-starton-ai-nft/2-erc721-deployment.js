import axios from "axios";
import {NETWORK, PROMPT, STARTON_API_KEY, STARTON_API_URL, STARTON_KMS_ADDRESS} from "./0-configuration.js";

export const uploadContractLevelMetadataOnStarton = async (image1Cid) => {
	try {
		const contractLevelMetadata = {
			name: PROMPT,
			description: "AI collection generated with Starton API and openAI",
			image: "ipfs://ipfs/" + image1Cid,
			"external_url": "https://starton.io"
		}
		const jsonUpload = await axios.post(STARTON_API_URL + "/ipfs/json", {
			name: "contract-level metadata" + PROMPT,
			content: contractLevelMetadata,
		}, {
			headers: {
				"x-api-key": STARTON_API_KEY
			}
		})
		return jsonUpload.data.cid
	} catch (e) {
		console.log(e, "Could not upload contract-level metadata")
	}
}

export const deployERC721Contract = async (contractLevelCid) => {
	const contract = await axios.post(STARTON_API_URL + "/smart-contract/from-template", {
		network: NETWORK,
		signerWallet: STARTON_KMS_ADDRESS,
		templateId: "ERC721_META_TRANSACTION",
		name: PROMPT + " collection ERC721 contract",
		description: "Autogenerated ai collection with Starton and openAI",
		params: [
			"AI/Starton nft collection",
			"NFTStartonAI",
			"ipfs://ipfs/",
			"ipfs://" + contractLevelCid,
			STARTON_KMS_ADDRESS,
		]
	}, {
		headers: {
			"x-api-key": STARTON_API_KEY,
		}
	})
	console.log("[STARTON] - CONTRACT ADDRESS:", contract.data.smartContract.address)
	console.log("tx hash:", contract.data.transaction.transactionHash)
	return contract.data.smartContract.address
}

export const ERC721deploy = async (imageCID) => {
	const contractLevelMetadata = await uploadContractLevelMetadataOnStarton(imageCID);
	const contractAddress = await deployERC721Contract(contractLevelMetadata)
	return contractAddress
}

ERC721deploy("bafybeifo4gc35tptcxm4umfsfbdv7opx4mnkt67wjj4xsxgcb6mr63boje").then().catch(e=>console.log(e))